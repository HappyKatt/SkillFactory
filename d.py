letters = ['a','b','c','d']
#Добавление объекта осуществляется с помощью метода append().
letters.append('e')
print(letters)
print(letters[4])
print(len(letters))
#Как и ожидалось, длина списка равна 5.
# Тогда доступ к последнему элементу можно получить,
# если уменьшить эту длину на 1: пример ниже
print(letters[len(letters)-1])
#Отрицательные индексы позволяют вывернуть наизнанку список и
# нумеровать его в обратном порядке.
# И тогда последний элемент будет иметь индекс -1, предпоследний — -2 и так далее.
# Пример:
print(letters[-1])
print(letters[-4])
#Метод pop(): удаление объектов из списка
letters.pop() # вызов метода без аргументов удаляет последний элемент списка
letters.pop(0) # или можно удалить элемент по его индексу
#Возможности языка позволяют выполнить определённые действия
# для каждого элемента списка.
# Такую операцию можно проделать с помощью функции map():
map(function, list)
# имеем список с числами с плавающей точкой
L = [3.3, 4.4, 5.5, 6.6]
# печатаем сам объект map
print(map(round, L)) # к каждому элементу применяем функцию округления
# <map object at 0x7fd7e86eb6a0>
# и результат его преобразования в список
print(list(map(round, L)))
# [3, 4, 6, 7]
#словари (dict) — неупорядоченные наборы объектов, доступных по ключу.
person = {} # с помощью фигурных скобок можно создать словарь
# словарь заполняется по принципу - ключ:объект (через двоеточие)
person = {'name' : 'Ivan Petrov'}
# в него можно также добавлять новые объекты по ключу
person['age'] = 25
person['email'] = 'ivan_petrov@example.com'
person['phone'] = '8(800)555-35-35'
print(person)
# {'name': 'Ivan Petrov', 'age': 25, 'email': 'ivan_petrov@example.com', 'phone': '8(800)555-35-35'}
#Можно отдельно получить список ключей:
print(person.keys())
# dict_keys(['name', 'age', 'email', 'phone'])
#Или список значений:
print(person.values())
# dict_values(['Ivan Petrov', 25, 'ivan_petrov@example.com', '8(800)555-35-35'])
